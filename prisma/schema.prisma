// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  firstName        String
  lastName         String
  passwordHash     String
  dateOfBirth      DateTime?
  gender           Gender    @default(PREFER_NOT_TO_SAY)
  profileImage     String?
  musicPreferences String[]
  venuePreferences String[]
  goingOutFrequency GoingOutFrequency @default(OCCASIONALLY)
  location         String?
  phoneNumber      String?
  isEmailVerified  Boolean   @default(false)
  role             UserRole  @default(USER)
  venueIds         String[]  // For venue managers
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastActiveAt     DateTime  @default(now())

  // Relations
  posts            Post[]
  deals            Deal[]
  events           Event[]
  refreshTokens    RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Venue {
  id               String           @id @default(cuid())
  name             String
  category         String
  location         String
  latitude         Float
  longitude        Float
  capacity         Int
  currentOccupancy Int              @default(0)
  rating           Float?
  priceRange       String
  pricing          Json?            // Flexible pricing object
  musicGenres      Json[]           // Array of music genre objects
  openingHours     Json             // Opening hours object
  features         Json[]           // Array of feature objects
  bookingURL       String?
  phoneNumber      String?
  images           String[]
  placeId          String?          // Google Places ID
  businessStatus   String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  busySnapshots    BusySnapshot[]
  posts            Post[]
  deals            Deal[]
  events           Event[]
  stories          Story[]

  @@map("venues")
}

model BusySnapshot {
  id                  String   @id @default(cuid())
  venueId             String
  timestamp           DateTime @default(now())
  occupancyCount      Int
  occupancyPercentage Int
  status              BusyStatus
  source              String   @default("realtime") // "realtime", "serp", "google", "estimated"

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("busy_snapshots")
  @@index([venueId, timestamp])
}

model Post {
  id        String   @id @default(cuid())
  venueId   String
  authorId  String
  content   String
  imageUrl  String?
  tags      String[]
  likes     Int      @default(0)
  comments  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  venue  Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Deal {
  id                  String   @id @default(cuid())
  venueId             String
  createdById         String
  title               String
  description         String
  discountPercentage  Int?
  validFrom           DateTime
  validUntil          DateTime
  termsAndConditions  String?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  createdBy User  @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("deals")
}

model Event {
  id          String    @id @default(cuid())
  venueId     String
  createdById String
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  ticketPrice Float?
  capacity    Int?
  eventType   String
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  createdBy User  @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("events")
}

model Story {
  id         String    @id @default(cuid())
  venueId    String
  authorId   String?   // Nullable for venue-posted stories
  mediaUrl   String
  mediaType  MediaType
  caption    String?
  views      Int       @default(0)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("stories")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// Enums
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum GoingOutFrequency {
  RARELY
  OCCASIONALLY
  REGULARLY
  FREQUENTLY
}

enum UserRole {
  USER
  VENUE_MANAGER
  ADMIN
}

enum BusyStatus {
  QUIET
  MODERATE
  BUSY
  VERY_BUSY
  CLOSED
}

enum MediaType {
  IMAGE
  VIDEO
}